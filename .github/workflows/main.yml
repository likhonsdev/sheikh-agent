name: Sheikh Agent Production Pipeline

on:
  workflow_dispatch:
    inputs:
      prompt_version:
        description: "Prompt version (branch/tag/commit)"
        required: false
        default: "main"
      model:
        description: "Gemini model version"
        required: false
        default: "gemini-1.5-flash"
      clean_previous:
        description: "Remove previous generated apps"
        required: false
        default: "false"
        type: boolean

  push:
    branches: [ main ]
    paths:
      - 'prompt.md'
      - '.github/workflows/main.yml'
    tags:
      - 'v*'

env:
  GENERATED_DIR: "generated"
  CACHE_DIR: "/tmp/sheikh-cache"
  TIMESTAMP: ${{ github.run_id }}-$(date +%s)

jobs:
  setup-environment:
    name: Setup Environment
    runs-on: ubuntu-latest
    outputs:
      prompt_sha: ${{ steps.get-prompt.outputs.prompt_sha }}
      run_id: ${{ env.TIMESTAMP }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.prompt_version || 'main' }}
          fetch-depth: 0

      - name: Get prompt SHA
        id: get-prompt
        run: echo "prompt_sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

  generate-application:
    name: Generate Application
    needs: setup-environment
    runs-on: ubuntu-latest
    container: node:20-bookworm-slim
    env:
      GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          path: src

      - name: Setup Python environment
        run: |
          # Create and activate virtual environment
          python3 -m venv .venv
          source .venv/bin/activate
          
          # Install system dependencies
          apt-get update && apt-get install -y \
            curl \
            jq \
            git
          
          # Install Python packages in venv
          pip install --no-cache-dir yq
          
          # Add venv to PATH
          echo "$GITHUB_WORKSPACE/.venv/bin" >> $GITHUB_PATH

      - name: Download latest agent
        run: |
          curl -sL https://raw.githubusercontent.com/${{ github.repository }}/main/final.sh \
            -o sheikh.sh
          chmod +x sheikh.sh

      - name: Generate application
        id: generate
        run: |
          OUTPUT_DIR="$GENERATED_DIR/app-${{ env.TIMESTAMP }}"
          mkdir -p $OUTPUT_DIR
          
          ./sheikh.sh \
            -p "./prompt.md" \
            -o "$OUTPUT_DIR" \
            -m "${{ inputs.model }}" \
            2>&1 | tee generation.log

          echo "output_dir=$OUTPUT_DIR" >> $GITHUB_OUTPUT
          echo "structure_file=structure.txt" >> $GITHUB_OUTPUT

          # Generate structure report
          find $OUTPUT_DIR -type d | sed -e "s|[^/]*/|  |g" -e "s|  |├── |1" > structure.txt

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: generated-app-${{ env.TIMESTAMP }}
          path: |
            ${{ steps.generate.outputs.output_dir }}
            structure.txt
            generation.log
          retention-days: 7

  deploy-and-document:
    name: Deploy & Document
    needs: generate-application
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: generated-app-${{ env.TIMESTAMP }}
          path: ${{ env.GENERATED_DIR }}

      - name: Commit generated app
        run: |
          git config --global user.name "Sheikh Agent"
          git config --global user.email "sheikh-agent@github.com"
          
          git add ${{ env.GENERATED_DIR }}
          git commit -m "feat: Generated app ${{ env.TIMESTAMP }} [skip ci]"
          git push origin main

  notify:
    name: Notification
    needs: [generate-application, deploy-and-document]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Slack Notification
        uses: slackapi/slack-github-action@v1.24.0
        with:
          channel-id: 'automation-alerts'
          slack-message: |
            :robot_face: Sheikh Agent Report:
            • Status: ${{ job.status }}
            • Run ID: ${{ env.TIMESTAMP }}
            • Prompt Version: ${{ needs.setup-environment.outputs.prompt_sha }}
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
